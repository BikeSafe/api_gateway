type RouteId {
  oid: String
}

type RouteCoordinateId {
  oid: String
}

type RouteUserId {
  oid: String
}

type RouteUser {
  name: String
  id2: Int
  userId: RouteUserId
}

type RouteCoordinate {
  lat: Float
  lng: Float
  coordinateId: RouteCoordinateId
}

type Route {
  name: String
  rating: Float
  public: Boolean
  done: Boolean
  startLocationId: RouteCoordinateId
  endLocationId: RouteCoordinateId
  creatorId2: Int
  memberId2s: [Int]
  routeId: RouteId
}

# Coordinate

input RouteCoordinateIdInput {
  oid: String
}

input RouteCoordinateInput {
  lat: Float
  lng: Float
}

input RouteCoordinateUpdateInput {
  lat: Float
  lng: Float
  coordinateId: RouteCoordinateIdInput
}

# User

input RouteUserInput {
  name: String
  id2: Int
}

input RouteUserIdInput {
  id2: Int
}

# Route

input RouteIdInput {
  oid: String
}

input RouteInput {
  name: String
  public: Boolean
  startLocationId: RouteCoordinateIdInput
  endLocationId: RouteCoordinateIdInput
  creatorId2: Int
}

input RouteQualifyInput {
  rating: Float
  routeId: RouteIdInput
}

input RouteMemberInput {
  id2: Int
  routeId: RouteIdInput
}

type Query {
  # Coordinate
  getCoordinateById(data: RouteCoordinateIdInput): RouteCoordinate
  # User
  getUserById(data: RouteUserIdInput): RouteUser
  # Route
  getRouteById(data: RouteIdInput): Route
  getPublicRoutes: [Route]
}

type Mutation {
  # Coordinate
  createCoordinate(data: RouteCoordinateInput): RouteCoordinate
  updateCoordinate(data: RouteCoordinateIdInput): Boolean
  deleteCoordinateById(data: RouteCoordinateIdInput): Boolean
  # User
  createUser(data: RouteUserInput): RouteUser
  updateUset(data: RouteUserInput): Boolean
  deleteUser(data: RouteUserIdInput): Boolean
  # Route
  createRoute(data: RouteInput): Route
  qualifyRoute(data: RouteQualifyInput): Boolean
  addMemberRoute(data: RouteMemberInput): Boolean
  deleteMemberRoute(data: RouteMemberInput): Boolean
  deleteRoute(data: RouteUserIdInput): Boolean
}